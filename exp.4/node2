#include <df_can.h>
#include <SPI.h>

#define LIGHT_PIN A0

const int SPI_CS_PIN = 10;  
MCPCAN CAN(SPI_CS_PIN);

unsigned char len = 0;
unsigned char id = 0;
unsigned char buf[8];

unsigned long prev_N4 = 0;
const unsigned long timeout = 5000;

void setup() {
  Serial.begin(9600);
  int count = 50;
  do {
    CAN.init();
    CAN.init_Mask(MCP_RXM0, 0, 0x7FF);
    CAN.init_Mask(MCP_RXM1, 0, 0x7FF);
    CAN.init_Filter(MCP_RXF0, 0, 0x10);

    if (CAN_OK == CAN.begin(CAN_500KBPS)) {
      Serial.println("CAN BUS Shield init ok!");
      sendDebug("N2_Ready");
      break;
    }
    else {
      delay(100);
      if (count == 0)
        Serial.println("CAN BUS Shield init failed");
    }
  } while (count--);

  attachInterrupt(0, MCP2515_ISR, FALLING);
}

void MCP2515_ISR() {
  len = 0;
  for (int i = 0; i < 8; i++) {
    buf[i] = 0;
  }
  while (CAN_MSGAVAIL == CAN.checkReceive()) {
    CAN.readMsgBuf(&len, buf);
    id = CAN.getCanId();

    if (id == 0x10) prev_N4 = millis(); // serial monitor
  }
}

void sendDebug(const char* msg) {
  CAN.sendMsgBuf(0x20, 0, 8, (unsigned char*)msg);
}

void loop() {
  int light = analogRead(LIGHT_PIN);
  if (light < 0 || light > 1023)
  {
    Serial.println("Failed to read from light sensor.");
    return;
  }
  Serial.print("Light Level: ");
  Serial.println(light);

  unsigned char data[2];
  data[0] = (light >> 8) & 0xFF; // upper
  data[1] = light & 0xFF;         

  CAN.sendMsgBuf(0x03, 0, 2, data);
  delay(2000);

  unsigned long now = millis();
  if (now - prev_N4 > timeout) {
    CAN.sendMsgBuf(0x30, 0, 8, (unsigned char*)"ALL_STOP");
    delay(2000);
  }
}
