#include <df_can.h>
#include <SPI.h>

const int SPI_CS_PIN = 10;  
MCPCAN CAN(SPI_CS_PIN);

const int red = 4;
const int yellow = 5;
const int green = 6;

unsigned char len = 0;
unsigned char id = 0;
unsigned char buf[8];

void setup()
{
  Serial.begin(9600);

  pinMode(red, OUTPUT);
  pinMode(yellow, OUTPUT);
  pinMode(green, OUTPUT);

  digitalWrite(red, LOW);
  digitalWrite(yellow, LOW);
  digitalWrite(green, LOW);

  int count = 50;
  do {
    CAN.init();
    CAN.init_Mask(MCP_RXM0, 0, 0x7ff);
    CAN.init_Mask(MCP_RXM1, 0, 0x7ff);
    CAN.init_Filter(MCP_RXF0, 0, 0x03);

    if(CAN_OK == CAN.begin(CAN_500KBPS)) {
      Serial.println("CAN BUS Shield init ok!");
      sendDebug("N1_Ready");
      break;
    } else {
      delay(100);
      if (count == 0)
        Serial.println("CAN BUS Shield init failed");
    }
  } while(count--);

  attachInterrupt(0, MCP2515_ISR, FALLING);
}

char prev_LED_state = ' ';
char LED_state = ' ';

void MCP2515_ISR() {
  len = 0;
  for (int i = 0; i < 8; i++) buf[i] = 0;

  while (CAN_MSGAVAIL == CAN.checkReceive()) {
    CAN.readMsgBuf(&len, buf);
    id = CAN.getCanId();
    sendDebug("N1_reciv");
    Serial.print("\nID : "); Serial.println(id);
    
    int light = (buf[0] << 8) | buf[1];
    Serial.print("Light Level : ");
    Serial.println(light);

    if (light >= 800)
      LED_state = 'R';
    else if (light >= 300)
      LED_state = 'Y';
    else
      LED_state = 'G';

    if (LED_state != prev_LED_state) {
      digitalWrite(red, LOW);
      digitalWrite(yellow, LOW);
      digitalWrite(green, LOW);

      digitalWrite(red, LED_state == 'R' ? HIGH : LOW);
      digitalWrite(yellow, LED_state == 'Y' ? HIGH : LOW);
      digitalWrite(green, LED_state == 'G' ? HIGH : LOW);

      if (LED_state == 'R') sendDebug("N1_LED_R");
      else if (LED_state == 'Y') sendDebug("N1_LED_Y");
      else sendDebug("N1_LED_G");

      prev_LED_state = LED_state;
    }
  }
}

void sendDebug(const char* msg) {
  Serial.println(msg);
  CAN.sendMsgBuf(0x20, 0, 8, (unsigned char*)msg);
}

void loop()
{
  CAN.sendMsgBuf(0x12, 0, 8, "N1_is_OK");
  delay(3000);
}
